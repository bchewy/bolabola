version: "3"

volumes:
  mongodb-data:
  pgdata:

networks:
  kong-net:
    driver: bridge
    name: kong-net

# MICROSERVICES #################################################################################################################################################################
services:
  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    networks:
      - kong-net
    ports:
      - 80:80

  # 3P Gateway Service ===================================
  3p-gateway:
    build:
      context: ./microservices/3p_gateway
      dockerfile: Dockerfile
    networks:
      - kong-net
    # ports:
    # - 5000:5000
    depends_on:
      - event
      - notification
      - queue-mgt

  # API Gateway Service ===================================
  # Distinct difference between authentication and API Gateway...

  # Authentication Service ===============================

  # Billing Service =======================================
  billing:
    build:
      context: ./microservices/billing
      dockerfile: Dockerfile
    networks:
      - kong-net
    # ports:
    #   - 5000:5000
    depends_on:
      - mysql

  # Event CRUD Service ===================================
  event:
    build:
      context: ./microservices/event_crud
      dockerfile: Dockerfile
    networks:
      - kong-net
    # ports:
    #   - 5000:5000
    depends_on:
      - mongodb

  # Event Orcha Service ========================================
  event-orcha:
    build:
      context: ./microservices/event_orcha
      dockerfile: Dockerfile
    networks:
      - kong-net
    # ports:
    #   - 5000:5000

  # Logging Service ======================================
  logging:
    build:
      context: ./microservices/logging
      dockerfile: Dockerfile
    networks:
      - kong-net
    # ports:
    #   - 5000:5000
    depends_on:
      - redis

  # Merch CRUD Service ==================================
  merch:
    build:
      context: ./microservices/merch_crud
      dockerfile: Dockerfile
    networks:
      - kong-net
    # ports:
    #   - 5000:5000
    depends_on:
      - mysql

  # Merch Cart Orcha Service =====================================
  merch-cart-orch:
    build:
      context: ./microservices/merchcart_orcha
      dockerfile: Dockerfile
    # ports:
    #   - 5000:5000
    networks:
      - kong-net

  # Merch Checkout Orcha Service =========================
  merch-checkout-orch:
    build:
      context: ./microservices/merchcheckout_orcha
      dockerfile: Dockerfile
    networks:
      - kong-net

  # Notification Service =================================
  notification:
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
    build:
      context: ./microservices/notification
      dockerfile: Dockerfile
    networks:
      - kong-net
    depends_on:
      - rabbitmq
    command:
      [
        "/wait-for-it.sh",
        "rabbitmq:5672",
        "--",
        "python",
        "/app/notification.py",
      ]

  # Queue Management Service =============================
  queue-mgt:
    build:
      context: ./microservices/queue
      dockerfile: Dockerfile
    networks:
      - kong-net
    environment:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY

  # RFID Service ========================================
  rfid:
    build:
      context: ./microservices/rfid
      dockerfile: Dockerfile
    networks:
      - kong-net

  # RFID Link Service ===========================================
  rfid-link:
    build:
      context: ./microservices/rfid_link
      dockerfile: Dockerfile
    networks:
      - kong-net

  # Seat CRUD Service ===========================================
  seat:
    build:
      context: ./microservices/seat_crud
      dockerfile: Dockerfile
    networks:
      - kong-net
    depends_on:
      - mysql

  # User CRUD Service ===========================================
  user:
    build:
      context: ./microservices/user_crud
      dockerfile: Dockerfile
    networks:
      - kong-net
    depends_on:
      - mysql

  # Venue CRUD Service ==========================================
  venue:
    build:
      context: ./microservices/venue_crud
      dockerfile: Dockerfile
    networks:
      - kong-net
    depends_on:
      - mysql

  # Wallet Service ======================================
  wallet:
    build:
      context: ./microservices/wallet
      dockerfile: Dockerfile
    # ports:
    #   - 5000:5000
    networks:
      - kong-net
    depends_on:
      - mysql

  # KONG items ##################################################################################################################################################################
  kong-database:
    image: postgres:15 # tested 20231101; Ref: https://docs.konghq.com/gateway/latest/support/third-party/
    platform: linux/amd64 # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - kong-net
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pgdata:/var/lib/postgresql/data

  kong-migration:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64 # <- required for Mac M1 chip. Otherwise, can remove
    command: "kong migrations bootstrap"
    restart: on-failure
    networks:
      - kong-net
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: password
    depends_on:
      - kong-database

  kong:
    image: kong/kong-gateway:3.2.2.5 # tested 20231101
    platform: linux/amd64 # <- required for Mac M1 chip. Otherwise, can remove
    restart: always
    networks:
      - kong-net
    environment:
      # Alternatively, if we want to use db-less we can turn this off
      KONG_DATABASE: off
      KONG_DECLARATIVE_CONFIG: /etc/kong/kong.yml

      # use database
      # KONG_DATABASE: postgres
      # KONG_PG_HOST: kong-database
      # KONG_PG_USER: kong
      # KONG_PG_PASSWORD: password
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    depends_on:
      - kong-migration
    ports: # https://docs.konghq.com/gateway/latest/production/networking/default-ports/
      - "8000:8000" # Takes incoming HTTP traffic from Consumers, and forwards it to upstream Services.
      - "8443:8443" # Takes incoming HTTPS traffic from Consumers, and forwards it to upstream Services.
      - "8001:8001" # Admin API. Listens for calls from the command line over HTTP.
      - "8444:8444" # Admin API. Listens for calls from the command line over HTTPS.
      - "8002:8002" # Kong Manager (GUI). Listens for HTTP traffic.
      - "8445:8445" # Kong Manager (GUI). Listens for HTTPS traffic.
      - "8003:8003" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8446:8446" # Dev Portal. Listens for HTTP traffic, assuming Dev Portal is enabled.
      - "8004:8004" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
      - "8447:8447" # Dev Portal /files traffic over HTTPS, assuming the Dev Portal is enabled.
    volumes:
      - ./infrastructure/kong/kong.yml:/etc/kong/kong.yml

  # Database items ###########################################################################################################################

  # MongoDB =============================================
  mongodb:
    image: mongo
    networks:
      - kong-net
    # ports:
    #   - 27017:27017
    volumes:
      - mongodb-data:/data/db
  # MySQL ===============================================
  mysql:
    image: mysql/mysql-server:8.0
    networks:
      - kong-net
    # ports:
    #   - 3306:3306
    environment:
      MYSQL_ROOT_PASSWORD: veryS3ecureP@ssword
      MYSQL_DATABASE: ticketboost
      MYSQL_USER: ticketboost
      MYSQL_PASSWORD: veryS3ecureP@ssword
  # REDIS ===============================================
  redis:
    image: redis
    networks:
      - kong-net
    # ports:
    #   - 6379:6379

  # AMQP items ####################################################################################################################################################

  # RabbitMQ ============================================
  rabbitmq:
    image: rabbitmq:3-management
    networks:
      - kong-net
    # Have to expose ports here to access via local
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ./infrastructure/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./infrastructure/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    environment:
      RABBITMQ_DEFAULT_USER: ticketboost
      RABBITMQ_DEFAULT_PASS: veryS3ecureP@ssword
